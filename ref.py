import telebot
from telebot import types
import json
import os
import time

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = '7549972063:AAH_ueDQxT8-K2D5EVm-M_jLFG1_c3wA9pc'
SPONSOR_CHANNELS = ['@lemon_wh', '@limonchat_777','@bet_gram1', '@jet_bio']
DATA_FILE = 'data.json'

bot = telebot.TeleBot(TOKEN)
bot_username = bot.get_me().username or "UnknownBot"

# === –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏ ===
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ===
def check_subscription(user_id):
    for channel in SPONSOR_CHANNELS:
        try:
            member = bot.get_chat_member(channel, user_id)
            if member.status not in ["member", "administrator", "creator"]:
                return False
        except:
            return False
    return True

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ /start ===
@bot.message_handler(commands=['start'])
def start(message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or f"user_{user_id}"
    language = message.from_user.language_code or "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    if not check_subscription(message.from_user.id):
        markup = types.InlineKeyboardMarkup(row_width=1)
        for ch in SPONSOR_CHANNELS:
            markup.add(types.InlineKeyboardButton(f"üîó –ü–µ—Ä–µ–π—Ç–∏: {ch}", url=f"https://t.me/{ch[1:]}"))
        markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="check_subs"))
        bot.send_message(message.chat.id, "üìõ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:", reply_markup=markup)
        return

    data = load_data()
    args = message.text.split()
    referrer_id = args[1] if len(args) > 1 else None

    if user_id in data:
        bot.send_message(message.chat.id, "‚úÖ –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")
    else:
        data[user_id] = {
            "username": username,
            "language": language,
            "referrer": referrer_id if referrer_id != user_id else None,
            "referrals": [],
            "balance": 0
        }

        if referrer_id and referrer_id in data:
            data[referrer_id]["referrals"].append(user_id)
            data[referrer_id]["balance"] += 1000
            try:
                bot.send_message(
                    int(referrer_id),
                    "üéâ –ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å!\n+1000 –≥—Ä–∞–º ü™ô"
                )
            except:
                pass

        save_data(data)
        bot.send_message(message.chat.id, "üõ† –°–æ–∑–¥–∞–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞...")
        time.sleep(1)
        bot.send_message(message.chat.id, "‚úÖ –ê–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω!")
        bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAEOcBVoHgI5xEh18LRdGsggm6P35WRj_wAC_QwAAgZQQEtJOAmxTRuvtDYE')

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("–ü—Ä–æ—Ñ–∏–ª—åüßõ‚Äç‚ôÄÔ∏è", "–ü–æ–º–æ—â—åü©∫", "–í—ã–≤–æ–¥üéÅ", "–†–µ—Ñ.—Å—Å—ã–ª–∫–∞üì∞")
    bot.send_message(message.chat.id, "üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=markup)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ ===
@bot.callback_query_handler(func=lambda call: call.data == "check_subs")
def callback_check_subs(call):
    if check_subscription(call.from_user.id):
        bot.delete_message(call.message.chat.id, call.message.message_id)
        start(call.message)
    else:
        bot.answer_callback_query(call.id, "üö´ –í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    data = load_data()
    user = data.get(user_id, {})

    if message.text == "–ü—Ä–æ—Ñ–∏–ª—åüßõ‚Äç‚ôÄÔ∏è":
        ref_count = len(user.get("referrals", []))
        bot.send_message(message.chat.id, f"""üßõ‚Äç‚ôÄÔ∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:
ID: {user_id}
–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: @{user.get("username", f"user_{user_id}")}
–Ø–∑—ã–∫: {user.get("language", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")}
–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {ref_count}
–ë–∞–ª–∞–Ω—Å: {user.get("balance", 0)} –≥—Ä–∞–º
""")

    elif message.text == "–ü–æ–º–æ—â—åü©∫":
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –ø–∏—à–∏ —Å—é–¥–∞: @test")

    elif message.text == "–í—ã–≤–æ–¥üéÅ":
        bot.send_message(message.chat.id, "üí≥ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ ‚Äî 1000 –≥—Ä–∞–º.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω –ø—Ä–æ—Ñ–∏–ª—è —Å—é–¥–∞: @test")

    elif message.text == "–†–µ—Ñ.—Å—Å—ã–ª–∫–∞üì∞":
        bot.send_message(message.chat.id, f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\nhttps://t.me/{bot_username}?start={user_id}")

    else:
        bot.send_message(message.chat.id, "ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.")

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    bot.polling(none_stop=True)
